2 Аналитическая часть

2.1 Характеристика предметной области

Данный проект посвящен созданию веб-приложения – партнерского сайта для всероссийской экологической акции «Бумбатл» в рамках деятельности «Детского технопарка «Кванториум» в городе Кургане.

Кванториум – Автономная некоммерческая организация «Детский технопарк «Кванториум», основанная 5 февраля 2016 года, реализует инновационную модель дополнительного образования для детей в соответствии с инициативой Агентства стратегических инициатив. Кванториум в Кургане представляет собой успешный пример государственно-частного партнерства, учредителями которого являются Республика Татарстан (ГАУ «Технопарк в сфере высоких технологий «ИТ-парк») и ПАО «КАМАЗ».

Кванториум предлагает широкий спектр образовательных программ, охватывающих различные научно-технические направления, такие как VR/AR-квантум, Автоквантум, Аэроквантум, ИТ-квантум, Геоквантум, Космоквантум, Наноквантум, Нейроквантум, а также программы по промышленной роботехнике и 3D-моделированию. На постоянной основе в Кванториуме обучается 598 школьников 5-11 классов, а ежегодно образовательные программы охватывают более 1700 детей посредством мастер-классов и экскурсий. Кванториум также активно занимается методическим обеспечением и координацией деятельности других образовательных организаций в сфере научно-технического творчества и робототехники.

Акция «Бумбатл» - Всероссийская экологическая акция, направленная на привлечение внимания к проблеме переработки макулатуры и повышению экологической ответственности у детей и взрослых. Партнёрский сайт, разрабатываемый в рамках данного проекта, будет служить платформой для информирования об акции, регистрации участников, публикации результатов и взаимодействия с организаторами. Интеграция с Кванториумом позволяет использовать сайт как инструмент для распространения экологических знаний и привлечение учащихся к активной деятельности по сохранению окружающей среды. В рамках этой интеграции, сайт будет тесно связан с образовательными программами Кванториума, способствуя целостному подходу к формированию экологической культуры у подрастающего поколения.

2.2 Характеристика комплекса задач и обоснование необходимости создания веб-приложения

Разработка веб-приложения – партнёрского сайта для акции «Бумбатл» в рамках деятельности «Детского технопарка «Кванториум» - обусловлена необходимостью эффективной организации и проведения этой всероссийской экологической инициативы.

Проект направлен на решение следующих задач:

1. Повышение осведомлённости – предоставление исчерпывающей информации об акции «Бумбатл», её целях и правилах участия, а также о важности переработки макулатуры и бережного отношения к окружающей среде. Это будет достигаться за счёт интуитивно понятного интерфейса и доступного представления информации.

2. Мониторинг прогресса – веб-приложение обеспечит возможность отслеживания индивидуальных и командных результатов участников акции, стимулируя их активное участие и соревновательный дух.

3. Привлечение участников – создание удобной платформы для регистрации участников акции, как из числа учащихся образовательной организации, так и из более широкого круга детей и подростков. Система регистрации должна быть простой и быстрой, минимизируя временные затраты.

4. Интеграция с системой сбора макулатуры – ключевой элемент проекта – интеграция с сервисом recyclemap.ru, представляющим интерактивную карту пунктов сбора макулатуры. Это позволит участникам легко находить ближайшие точки сбора и упростит процесс сдачи макулатуры.

5. Образовательный аспект – сайт будет служить дополнительным образовательным ресурсом, интегрированным с программами Кванториума. Он может содержать образовательные материалы по теме экологии и переработки отходов, а также информацию о деятельности Кванториума.

6. Создание сообщества – платформа будет способствовать формированию сообщества участников акции, позволяя им обмениваться опытом, идеями и достижениями.

Обоснование выбора веб-приложения – разработка веб-приложения является наиболее эффективным решением для достижения поставленных целей. Веб-доступность позволяет участникам из любого региона принять участие в акции в любое удобное время. Интерактивные элементы сайта, такие как интерактивная карта пунктов сбора макулатуры и система отслеживания результатов, повышают уровень вовлеченности и интереса участников. Интеграция с образовательными программами Кванториума делает сайт не только инструментом для участия в акции, но и важным образовательным ресурсом. Выбор веб-приложения обеспечивает масштабируемость и доступность проекта для большого числа участников.

2.3 Анализ существующих программных средств для создания веб-приложения

Для разработки веб-приложения для акции «Бумбатл» были рассмотрены следующие программные средства, с учетом требований к производительности, масштабируемости и безопасности.

Таблица 1

Характеристика	Laravel 12	Django	Express.js	Ruby on Rails
Встроенная аутентификация	+	+	-	+
Мощный ORM	+	+	-	+
Встроенная защита (CSRF, XSS и др.)	+	+	-	+
Готовая админ-панель	-	+	-	+
Гибкость маршрутизации	+	-	+	-
Легковесность	-	-	+	-
Производительность	+	-	+	-
Большое сообщество	+	+	+	+
Хорошая документация	+	+	+	+
Простота интеграции с фронтендом	+	+	+	+
CLI для автоматизации задач	+	-	-	+
Подходит для небольших проектов	-	-	+	-
Быстрый старт разработки	+	+	-	+
Зависимость от фреймворка	+	+	-	+
Требует ручной настройки	-	-	+	-

Таблица 2

Характеристика	Vite	Webpack	Parcel	Rollup
Быстрая разработка (HMR)	+	-	+	-
Оптимизированная production-сборка	+	+	-	+
Простота конфигурации	+	-	+	-
Поддержка TypeScript	+	+	+	+
Большая экосистема плагинов	-	+	-	-
Проверенная стабильность	-	+	±	+
Гибкость настройки	±	+	-	+
Нулевая/минимальная конфигурация	-	-	+	-
Хорошая оптимизация бандла	+	+	±	+
Поддержка ES-модулей	+	±	+	+
Легковесность	+	-	+	+
Совместимость с Laravel	+	+	±	-
Подходит для сложных проектов	±	+	-	+
Поддержка старых браузеров	±	+	+	-

Таблица 3

Характеристика	Bootstrap	Material UI	Chakra UI	Bulma
Утилитарный подход (гибкость)	+	-	+	-
Готовые компоненты	+ 	+	+	+
Адаптивный дизайн	+	+	+	+
Легкая кастомизация	+	-	+	±
Большое сообщество	+	+	-	±
Хорошая документация	+	+	+	+
Маленький размер CSS	-	-	+	+
Material Design	-	+	-	-
Доступность (a11y)	±	+	+	±
Простота использования	± 	+	+	+
Консистентный дизайн	±	+	+	+
Подходит для сложных проектов	+	+	±	-
Активное развитие	+	+	+	-

Таблица 4

Характеристика	SQLite 3	MySQL	PostgreSQL	MongoDB
Не требует отдельного сервера	+	-	-	-
Простота в использовании	+	±	-	±
Встроенная поддержка в Laravel	+	+	+	+
Легкость в развертывании	+	-	-	±
Не требует настройки	+	-	-	-
Подходит для небольших проектов	+	+	+	+
Хорошая производительность	-	+	+	+
Большое сообщество	±	+	+	+
Много хостинг-провайдеров	-	+	±	+
Мощная функциональность	-	-	+	+
Поддержка сложных запросов	-	±	+	-
Гибкая схема данных	-	-	-	+
Хорошая масштабируемость	-	±	+	+

Стек Laravel 12 + Bootstrap CSS + SQLite 3 был выбран благодаря оптимальному сочетанию производительности, скорости разработки и лёгкости поддержки: Laravel 12 обеспечивает быструю разработку с элегантным синтаксисом, встроенной безопасностью и удобной работой с данными через Eloquent ORM; Bootstrap CSS предоставляет готовые адаптивные компоненты с простой кастомизацией; SQLite 3 позволяет работать без сложной настройки сервера, оставаясь идеальным решением для небольших проектов. Этот стек требует минимальных ресурсов, сокращает время выхода на рынок и идеально подходит для MVP, админ-панелей, корпоративных порталов и учебных проектов.

2.4 Функции и параметры программных средств, используемых для решения задач

В рамках разработки веб-приложения для акции «Бумбатл» используются следующие программные средства и технологии:

Laravel 12
Роль: PHP-фреймворк для разработки серверной части приложения.
Функции:
- Маршрутизация запросов
- Управление базой данных через ORM Eloquent
- Аутентификация и авторизация пользователей
- Обработка форм и валидация данных
- Шаблонизация через Blade
Параметры:
- Способы структурирования программ: MVC архитектура
- Встроенные элементы языка: Middleware, Service Providers, Facades
- Средства обмена данными: RESTful API, JSON responses

Vite
Роль: Сборщик фронтенд-ресурсов и инструмент разработки.
Функции:
- Компиляция и минификация JavaScript и CSS
- Горячая перезагрузка при разработке
- Оптимизация изображений
- Управление зависимостями
Параметры:
- Способы структурирования программ: Модульная система ES
- Встроенные элементы языка: Import/Export синтаксис
- Средства обмена данными: WebSocket для HMR

Bootstrap 5
Роль: CSS-фреймворк для создания адаптивного интерфейса.
Функции:
- Сетка для верстки
- Готовые компоненты интерфейса
- Утилиты для типографики и стилизации
- Интерактивные элементы
Параметры:
- Способы структурирования программ: Компонентный подход
- Встроенные элементы языка: CSS-классы и переменные
- Средства обмена данными: JavaScript события

SQLite 3
Роль: Встраиваемая реляционная база данных.
Функции:
- Хранение данных пользователей
- Управление сессиями
- Кэширование запросов
- Транзакционная обработка
Параметры:
- Способы структурирования программ: SQL-запросы
- Встроенные элементы языка: SQLite диалект SQL
- Средства обмена данными: PDO, Eloquent ORM

Таблица 5

Название конструкции | Формат | Назначение
---|---|---
Маршрут | Route::get('/home', [HomeController::class, 'index']) | Определяет обработчик HTTP-запроса для URL
Миграция | Schema::create('users', function (Blueprint $table) {...} | Создание структуры таблицы в базе данных
Модель | class User extends Model {...} | Определение модели данных и её свойств
Контроллер | class HomeController extends Controller {...} | Обработка бизнес-логики приложения
Middleware | class AuthMiddleware {...} | Фильтрация HTTP-запросов
Blade-шаблон | @extends('layouts.app') | Определение шаблона страницы
Компонент Bootstrap | <div class="container"> | Создание адаптивного контейнера
SQL-запрос | SELECT * FROM users WHERE active = 1 | Выборка данных из базы
Vite конфигурация | export default defineConfig({...}) | Настройка сборки ресурсов
API-endpoint | Route::post('/api/auth', [AuthController::class, 'login']) | Определение точки входа API

2.5 Техническое задание

2.5.1 Общие требования

1. Название приложения: "Бумбатл & Кванториум"

2. Доменное имя: bumbattle-kvantorium.ru

3. Поддерживаемые языки: Русский язык

4. Адаптивный дизайн:
   - Десктоп (1920px и выше)
   - Планшет (768px - 1919px)
   - Мобильные устройства (320px - 767px)

5. Производительность:
   - Время загрузки страниц не более 3 секунд
   - Оптимизация изображений
   - Кэширование статического контента

2.5.2 Ролевая модель

Таблица 6

Роль | Возможности и полномочия | Создается кем
---|---|---
Незарегистрированный пользователь | Просмотр публичного контента, просмотр карты пунктов приема, регистрация | Система
Зарегистрированный пользователь | Авторизация, управление профилем, участие в акции, загрузка результатов | Самостоятельная регистрация
Модератор | Проверка загруженных материалов, управление контентом, обработка заявок | Администратор
Администратор | Полный доступ к системе, управление пользователями, настройка параметров | Главный администратор

2.5.3 Функциональные требования к публичной части

1. Главная страница:
   1.1. Блок статистики:
       - Общее количество собранной макулатуры
       - Количество участников
       - Количество активных команд
       - Экологический эффект

   1.2. Информационный блок:
       - Описание акции
       - Правила участия
       - Сроки проведения
       - Призы и награды

   1.3. Новостная лента:
       - Последние новости
       - Анонсы мероприятий
       - Истории успеха

   1.4. Карта пунктов приема:
       - Интеграция с recyclemap.ru
       - Фильтрация по типам пунктов
       - Построение маршрута
       - Информация о режиме работы

2.5.4 Функциональные требования к личному кабинету клиента

1. Управление профилем:
   1.1. Просмотр и редактирование личных данных:
       - ФИО
       - Email
       - Телефон
       - Фотография профиля

   1.2. Настройки безопасности:
       - Изменение пароля

2. Управление командой:
   2.1. Создание команды:
       - Название команды
       - Описание
       - Логотип

   2.2. Управление участниками:
       - Приглашение новых участников
       - Удаление участников
       - Назначение ролей
       - Передача управления командой

   2.3. Командная статистика:
       - Общий вес собранной макулатуры
       - Количество участников
       - Рейтинг в общем зачете
       - История достижений

3. Работа с результатами:
   3.1. Загрузка результатов:
       - Форма отчета
       - Загрузка фотографий
       - Загрузка документов
       - Указание даты сдачи

   3.2. История результатов:
       - Список всех сдач
       - Статус проверки
       - Комментарии модератора
       - История изменений

   3.3. Статистика:
       - Сравнение с другими командами
       - Прогресс по целям
       - Достижения и награды

4. Работа с картой:
   4.1. Поиск пунктов приема:
       - Поиск по адресу
       - Фильтрация по типу
       - Поиск по режиму работы
       - Избранные пункты

   4.3. Информация о пунктах:
       - Подробное описание
       - Режим работы
       - Контакты
       - Отзывы и рейтинг

5. Образовательные материалы:
   5.1. Доступ к материалам:
       - Видео-уроки
       - Текстовые материалы
       - Инфографика
       - Тесты и задания

   5.2. Прогресс обучения:
       - Пройденные материалы
       - Достижения

2.5.5 Функциональные требования к административной части

1. Панель управления:
   1.1. Управление пользователями:
       - Создание/редактирование/удаление
       - Управление ролями
       - Блокировка аккаунтов

   1.2. Управление контентом:
       - Публикация новостей
       - Модерация материалов
       - Управление страницами

   1.3. Статистика и отчеты:
       - Общая статистика
       - Детализация по регионам
       - Экспорт данных

2.5.6 Архитектура сайта

Архитектура веб-приложения "Бумбатл" построена на основе современного стека технологий и следует принципам MVC (Model-View-Controller). Приложение имеет модульную структуру, что обеспечивает гибкость и масштабируемость.

[Визуальное представление архитектуры]

                                    ┌────────────────────────────────┐
                                    │         Frontend Layer         │
                                    │                                │
                                    │  ┌─────────┐  ┌──────────┐     │
                                    │  │  HTML5  │  │  CSS3    │     │
                                    │  └─────────┘  └──────────┘     │
                                    │                                │
                                    │  ┌─────────┐  ┌──────────┐     │
                                    │  │  js     │  │ Bootstrap│     │
                                    │  └─────────┘  └──────────┘     │
                                    │                                │
                                    │  ┌─────────┐  ┌──────────┐     │
                                    │  │  Vite   │  │  Google  │     │
                                    │  └─────────┘  │  Maps    │     │
                                    └───────────────┴──────────┴─────┘
                                            │              │
                                            ▼              ▼
┌───────────────────────────────────────────────────────────────────────┐
│                         Backend Layer (Laravel)                       │
│                                                                       │
│  ┌─────────────┐  ┌─────────────┐  ┌─────────────┐  ┌─────────────┐   │
│  │ Controllers │  │   Models    │  │  Services   │  │  Middleware │   │
│  └─────────────┘  └─────────────┘  └─────────────┘  └─────────────┘   │
│                                                                       │
│  ┌─────────────┐  ┌─────────────┐  ┌─────────────┐  ┌─────────────┐   │
│  │   Routes    │  │  Database   │  │   Cache     │  │   Queue     │   │
│  └─────────────┘  └─────────────┘  └─────────────┘  └─────────────┘   │
└───────────────────────────────────────────────────────────────────────┘
                                            │
                                            ▼
┌─────────────────────────────────────────────────────────────────────────┐
│                         Database Layer (SQLite)                         │
│                                                                         │
│  ┌─────────────┐  ┌─────────────┐  ┌─────────────┐  ┌─────────────┐     │
│  │   Users     │  │   Teams     │  │  Results    │  │   Posts     │     │
│  └─────────────┘  └─────────────┘  └─────────────┘  └─────────────┘     │
│                                                                         │
│  ┌─────────────┐  ┌─────────────┐  ┌─────────────┐  ┌─────────────┐     │
│  │Achievements │  │  Members    │  │  Comments   │  │  Settings   │     │
│  └─────────────┘  └─────────────┘  └─────────────┘  └─────────────┘     │
└─────────────────────────────────────────────────────────────────────────┘

[Описание слоев]

1. Frontend Layer:
   - HTML5 + CSS3: Базовая структура и стили
   - Vue.js: Интерактивные компоненты
   - Bootstrap: Адаптивный дизайн
   - Vite: Сборка и оптимизация
   - Google Maps: Интеграция карты

2. Backend Layer (Laravel):
   - Controllers: Обработка запросов
   - Models: Работа с данными
   - Services: Бизнес-логика
   - Middleware: Фильтрация запросов
   - Routes: Маршрутизация
   - Database: Работа с БД
   - Cache: Кэширование
   - Queue: Очереди задач

3. Database Layer (SQLite):
   - Users: Пользователи
   - Teams: Команды
   - Results: Результаты
   - Posts: Новости
   - Achievements: Достижения
   - Members: Участники
   - Comments: Комментарии
   - Settings: Настройки

[Схема взаимодействия компонентов]

┌─────────────┐     ┌─────────────┐     ┌─────────────┐
│   Client    │     │   Server    │     │  Database   │
│  (Browser)  │     │  (Laravel)  │     │   (SQLite)  │
└──────┬──────┘     └──────┬──────┘     └──────┬──────┘
       │                   │                   │
       │ HTTP Request      │                   │
       │─────────────────> │                   │
       │                   │                   │
       │                   │  Query Data       │
       │                   │──────────────────>│
       │                   │                   │
       │                   │  Return Datа      │
       │                   │<──────────────────│
       │                   │                   │
       │ HTTP Response     │                   │
       │<───────────────── │                   │
       │                   │                   │
└──────┴──────┘     └──────┴──────┘     └──────┴──────┘

[Описание взаимодействия]

1. Клиент отправляет HTTP-запрос на сервер
2. Laravel обрабатывает запрос через маршрутизацию
3. Контроллер обрабатывает бизнес-логику
4. Модель взаимодействует с базой данных
5. Данные возвращаются клиенту в формате JSON/HTML

2.5.7 Технические требования

1. Требования к платформе разработки:

   1.1. Операционная система:
       - Windows 11/10/8.1
       - macOS 10.15 и выше
       - Linux (Ubuntu 20.04 LTS и выше)

   1.2. Средства разработки:
       - PHP 8.2 или выше
       - Composer 2.0 или выше
       - Node.js 16.x или выше
       - npm 8.x или выше
       - Git 2.x или выше

2. Требования к технологиям:

   2.1. Серверная часть:
       - Laravel 12.x
       - SQLite 3
       - Redis (для кэширования)
       - PHP Extensions:
         * PDO
         * SQLite3
         * GD/ImageMagick
         * OpenSSL
         * Mbstring
         * JSON
         * XML

   2.2. Клиентская часть:
       - HTML5
       - CSS3
       - JavaScript (ES6+)
       - Bootstrap 5.3.3
       - Vite 6.0.11
       - Vue.js 3.x (для компонентов)

3. Требования к техническим средствам:

   3.1. Серверные требования:
       - Процессор: 2 ядра и выше
       - Оперативная память: минимум 512 МБ
       - Дисковое пространство: минимум 1 ГБ
       - Поддержка SSL/TLS
       - Доступ к интернету

   3.2. Клиентские требования:
       - Современный веб-браузер
       - JavaScript включен
       - Cookies включены
       - Минимальное разрешение экрана: 320x480
       - Поддержка CSS Grid и Flexbox

4. Требования к адаптивности:

   4.1. Брейкпоинты:
       - Мобильные устройства: 320px - 767px
       - Планшеты: 768px - 1023px
       - Десктопы: 1024px и выше

   4.2. Особенности адаптации:
       - Гибкая сетка (Grid System)
       - Отзывчивые изображения
       - Адаптивная типографика
       - Оптимизированная навигация
       - Touch-friendly интерфейс

5. Требования к кроссбраузерности:

   5.1. Поддерживаемые браузеры:
       - Google Chrome (последние 2 версии)
       - Mozilla Firefox (последние 2 версии)
       - Microsoft Edge (последние 2 версии)
       - Safari (последние 2 версии)
       - Opera (последние 2 версии)

   5.2. Требования к отображению:
       - Корректное отображение всех элементов
       - Работа всех интерактивных компонентов
       - Поддержка современных CSS-свойств
       - Совместимость с ES6+ JavaScript
       - Корректная работа форм

6. Требования к безопасности:

   6.1. Общие требования:
       - HTTPS протокол
       - Защита от XSS-атак
       - Защита от CSRF-атак
       - Защита от SQL-инъекций
       - Rate limiting

   6.2. Аутентификация и авторизация:
       - Безопасное хранение паролей
       - Двухфакторная аутентификация
       - Защита от брутфорс-атак
       - Безопасные сессии
       - JWT токены для API

7. Требования к производительности:

   7.1. Время загрузки:
       - Первая загрузка страницы: не более 3 секунд
       - Последующие загрузки: не более 1 секунды
       - Время отклика API: не более 200мс

   7.2. Оптимизация:
       - Минификация CSS/JS
       - Оптимизация изображений
       - Кэширование статического контента
       - Ленивая загрузка
       - Код-сплиттинг

8. Требования к доступности:

   8.1. WCAG 2.1:
       - Уровень соответствия: AA
       - Поддержка скринридеров
       - Навигация с клавиатуры
       - Достаточный контраст
       - Альтернативные тексты

   8.2. Специальные возможности:
       - Масштабирование текста
       - Высококонтрастный режим
       - Поддержка клавиатурной навигации
       - Семантическая разметка
       - ARIA-атрибуты

9. Требования к документации:

   9.1. Техническая документация:
       - API документация
       - Инструкции по развертыванию
       - Документация по коду
       - Схема базы данных
       - Описание архитектуры

   9.2. Пользовательская документация:
       - Руководство пользователя
       - FAQ
       - Инструкции по устранению неполадок
       - Справочная система
       - Видео-инструкции

2.6 Организация интерфейса пользователя

Для создания эффективного и удобного пользовательского интерфейса веб-приложения были использованы современные принципы UI/UX дизайна и методологии проектирования.

{Сюда нужно вставить Вайрфреймы}

3 Проектная часть

3.1 Разработка дизайна сайта

3.1.1 Сервисы, использовавшиеся для подбора шрифтов и цветов

Для создания визуального стиля веб-приложения были использованы следующие сервисы:

1. Adobe Color:
   - Создание цветовых схем
   - Проверка контрастности
   - Генерация палитр
   - Анализ доступности цветов

2. Google Fonts:
   - Подбор шрифтов
   - Анализ сочетаемости
   - Оптимизация загрузки
   - Проверка поддержки языков

3. Coolors:
   - Генерация цветовых палитр
   - Проверка сочетаемости
   - Экспорт в различные форматы
   - Создание градиентов

3.1.2 Выбор цветов

Основная цветовая палитра:

1. Основной цвет: #3f865c (Зеленый)
   Применение:
   - Кнопки успешных действий
   - Элементы успешного статуса
   - Основные акценты интерфейса
   - Индикаторы прогресса

2. Информационный цвет: #351e03 (Коричневый)
   Применение:
   - Информационные кнопки
   - Элементы навигации
   - Второстепенные акценты
   - Статусные индикаторы

3. Предупреждающий цвет: #f5cb45 (Желтый)
   Применение:
   - Кнопки предупреждений
   - Элементы внимания
   - Временные уведомления
   - Статусы ожидания

4. Фоновый цвет: #d2e4bc (Светло-зеленый)
   Применение:
   - Основной фон страниц
   - Фон карточек
   - Фон секций
   - Фон модальных окон

5. Цвет текста: #292121 (Темно-коричневый)
   Применение:
   - Основной текст
   - Заголовки
   - Описания
   - Метаданные

3.1.3 Типографика

Основной шрифт: Roboto

1. Заголовки:
   - h1: 32px, Regular (400)
     * Межстрочный интервал: 1.2
     * Отступ снизу: 24px

   - h2: 24px, Regular (400)
     * Межстрочный интервал: 1.3
     * Отступ снизу: 20px

   - h3: 20px, Medium (500)
     * Межстрочный интервал: 1.4
     * Отступ снизу: 16px

2. Основной текст:
   - Размер: 16px
   - Начертание: Light (300)
   - Межстрочный интервал: 1.5
   - Цвет: #333333

3. Вспомогательный текст:
   - Размер: 14px
   - Начертание: Regular (400)
   - Межстрочный интервал: 1.4
   - Цвет: #666666

4. Кнопки и интерактивные элементы:
   - Размер: 18px
   - Начертание: Medium (500)
   - Трансформация: uppercase
   - Межбуквенный интервал: 0.5px

3.1.4 Обоснование выбора элементов дизайна

1. Обоснование выбора цветовой палитры:

   1.1. Основной цвет (#3f865c - Зеленый):
       - Выбран как символ экологичности и природы
       - Соответствует тематике акции по сбору макулатуры
       - Имеет хорошую контрастность с белым фоном
       - Воспринимается как положительный и активный цвет
       - Соответствует брендингу экологических инициатив

   1.2. Информационный цвет (#351e03 - Коричневый):
       - Создает гармоничное сочетание с основным зеленым
       - Ассоциируется с технологичностью и надежностью
       - Обеспечивает хорошую читаемость текста
       - Используется для второстепенных элементов, не конкурируя с основным цветом
       - Соответствует современным трендам веб-дизайна

   1.3. Предупреждающий цвет (#f5cb45 - Желтый):
       - Привлекает внимание к важным элементам
       - Создает контраст с основными цветами
       - Используется для призывов к действию
       - Ассоциируется с энергией и активностью
       - Улучшает визуальную иерархию интерфейса

   1.4. Фоновый цвет (#d2e4bc - Светло-зеленый):
       - Обеспечивает максимальную читаемость контента
       - Создает ощущение чистоты и порядка
       - Соответствует современным трендам минималистичного дизайна
       - Уменьшает нагрузку на глаза при длительной работе
       - Позволяет другим цветам выступать на переднем плане

2. Обоснование выбора типографики:

   2.1. Шрифт Roboto:
       - Разработан специально для веб-интерфейсов
       - Имеет отличную читаемость на всех устройствах
       - Поддерживает множество начертаний
       - Оптимизирован для экранов
       - Широко распространен и хорошо поддерживается браузерами

   2.2. Размеры заголовков:
       - h1 (32px):
         * Достаточно крупный для главных заголовков
         * Хорошо выделяется на странице
         * Соответствует иерархии контента
         * Оптимален для SEO
         * Обеспечивает хорошую читаемость

       - h2 (24px):
         * Создает четкую визуальную иерархию
         * Достаточно заметен, но не конкурирует с h1
         * Подходит для подзаголовков разделов
         * Хорошо сочетается с основным текстом
         * Оптимален для мобильных устройств

       - h3 (20px):
         * Идеален для заголовков карточек и блоков
         * Сохраняет читаемость при уменьшении
         * Хорошо сочетается с другими элементами
         * Подходит для навигационных элементов
         * Оптимален для плотного контента

   2.3. Основной текст (16px):
       - Оптимальный размер для чтения на экране
       - Соответствует стандартам веб-типографики
       - Хорошо масштабируется на разных устройствах
       - Обеспечивает комфортное чтение
       - Поддерживает доступность (WCAG)

   2.4. Вспомогательный текст (14px):
       - Достаточно мелкий для второстепенной информации
       - Сохраняет читаемость
       - Экономит место на экране
       - Создает визуальную иерархию
       - Подходит для подписей и метаданных

3. Обоснование выбора сервисов:

   3.1. Adobe Color:
       - Профессиональный инструмент для работы с цветом
       - Позволяет создавать гармоничные цветовые схемы
       - Обеспечивает соответствие стандартам доступности
       - Предоставляет инструменты для анализа контраста
       - Позволяет экспортировать цвета в различные форматы

   3.2. Google Fonts:
       - Бесплатный и надежный сервис
       - Обеспечивает быструю загрузку шрифтов
       - Предоставляет широкий выбор шрифтов
       - Поддерживает оптимизацию для веб
       - Имеет хорошую документацию

   3.3. Coolors:
       - Удобный инструмент для быстрого подбора цветов
       - Позволяет создавать и сохранять палитры
       - Предоставляет инструменты для создания градиентов
       - Поддерживает экспорт в различные форматы
       - Имеет интуитивно понятный интерфейс

3.2 Построение логической структуры сайта

Логическая структура сайта представляет собой иерархическую организацию информации и функциональных элементов веб-приложения. Структура разработана с учетом удобства навигации и доступности всех функций для различных групп пользователей.

{ Вставить карту сайта }

3.3 Описание логики сценариев использования программного продукта

В данном разделе описываются основные сценарии использования веб-приложения для акции "Бумбатл", включая последовательность действий пользователей и обработку данных системой.

{ Вставить Диаграмму последовательностей }



3.4 Построение физической структуры веб-приложения

В данном разделе описывается физическая структура веб-приложения, включая организацию файлов, базы данных и компонентов системы.

Структура директорий проекта:

/
├── app/
│   ├── Http/
│   │   ├── Controllers/
│   │   │   ├── AuthController.php        # Контроллер аутентификации
│   │   │   ├── TeamController.php        # Контроллер управления командами
│   │   │   ├── ResultController.php      # Контроллер результатов
│   │   │   ├── PostController.php        # Контроллер новостей
│   │   │   └── AdminController.php       # Контроллер админ-панели
│   │   ├── Middleware/
│   │   │   ├── Authenticate.php          # Middleware аутентификации
│   │   │   ├── VerifyRole.php            # Middleware проверки ролей
│   │   │   └── ValidateTeam.php          # Middleware валидации команды
│   │   └── Requests/
│   │       ├── TeamRequest.php           # Валидация данных команды
│   │       └── ResultRequest.php         # Валидация данных результатов
│   ├── Models/
│   │   ├── User.php                      # Модель пользователя
│   │   ├── Team.php                      # Модель команды
│   │   ├── TeamMember.php                # Модель участника команды
│   │   ├── Result.php                    # Модель результатов
│   │   └── Post.php                      # Модель новостей
│   ├── Services/
│   │   ├── AuthService.php               # Сервис аутентификации
│   │   ├── TeamService.php               # Сервис управления командами
│   │   ├── ResultService.php             # Сервис обработки результатов
│   │   └── FileUploadService.php         # Сервис загрузки файлов
│   └── Providers/
│       └── AppServiceProvider.php         # Основной провайдер приложения
├── config/
│   ├── app.php                           # Основные настройки приложения
│   ├── auth.php                          # Настройки аутентификации
│   ├── database.php                      # Настройки базы данных
│   └── filesystems.php                   # Настройки файловой системы
├── database/
│   ├── migrations/
│   │   ├── create_users_table.php        # Миграция таблицы пользователей
│   │   ├── create_teams_table.php        # Миграция таблицы команд
│   │   ├── create_team_members_table.php # Миграция таблицы участников
│   │   ├── create_results_table.php      # Миграция таблицы результатов
│   │   └── create_posts_table.php        # Миграция таблицы новостей
│   └── seeders/
│       ├── UserSeeder.php                # Сидер пользователей
│       └── PostSeeder.php                # Сидер новостей
├── public/
│   ├── assets/
│   │   ├── css/
│   │   │   └── app.css                   # Основные стили
│   │   └── js/
│   │       ├── app.js                    # Основной JavaScript
│   │       ├── auth.js                   # Скрипты аутентификации
│   │       ├── teams.js                  # Скрипты управления командами
│   │       └── map.js                    # Скрипты работы с картой
│   └── storage/
│       └── app/
│           └── public/                   # Публичные файлы
├── resources/
│   ├── views/
│   │   ├── layouts/
│   │   │   └── app.blade.php             # Основной шаблон
│   │   ├── components/
│   │   │   ├── header.blade.php          # Компонент шапки
│   │   │   ├── footer.blade.php          # Компонент подвала
│   │   │   └── map.blade.php             # Компонент карты
│   │   ├── auth/
│   │   │   ├── login.blade.php           # Страница входа
│   │   │   └── register.blade.php        # Страница регистрации
│   │   ├── teams/
│   │   │   ├── index.blade.php           # Список команд
│   │   │   └── show.blade.php            # Страница команды
│   │   └── admin/
│   │       ├── dashboard.blade.php       # Панель управления
│   │       └── users.blade.php           # Управление пользователями
│   ├── js/
│   │   └── components/                   # Vue.js компоненты
│   └── css/
│       └── app.scss                      # Основные стили SCSS
├── routes/
│   ├── web.php                           # Веб-маршруты
│   └── api.php                           # API-маршруты
├── storage/
│   ├── logs/                             # Логи приложения
│   └── framework/                        # Фреймворк файлы
└── tests/
    ├── Feature/
    │   ├── AuthTest.php                  # Тесты аутентификации
    │   ├── TeamTest.php                  # Тесты команд
    │   └── ResultTest.php                # Тесты результатов
    └── Unit/
        └── UserTest.php                  # Модульные тесты

3.5 Руководство пользователя

В данном разделе описывается руководство по использованию веб-приложения для акции "Бумбатл", включая инструкции по регистрации, работе с личным кабинетом и участию в акции.

{ Создать скриншоты страниц и на них всё написать }

3.5.1 Регистрация и авторизация

1. Регистрация нового пользователя:
   1.1. На главной странице нажать кнопку "Регистрация"
   1.2. Заполнить форму регистрации:
       - Имя и фамилия
       - Email
       - Пароль (минимум 8 символов)
       - Подтверждение пароля
   1.3. Подтвердить email через ссылку в письме
   1.4. Войти в систему

2. Авторизация:
   2.1. Нажать кнопку "Вход"
   2.2. Ввести email и пароль
   2.3. При необходимости использовать "Забыли пароль?"

3.5.2 Работа с личным кабинетом

1. Профиль пользователя:
   1.1. Просмотр личных данных
   1.2. Редактирование информации
   1.3. Настройка уведомлений
   1.4. История активности

2. Управление командой:
   2.1. Создание новой команды:
       - Название команды
       - Описание
       - Выбор капитана
   2.2. Приглашение участников:
       - По email
       - По ссылке
   2.3. Управление участниками:
       - Назначение ролей
       - Исключение участников
       - Передача управления

3.5.3 Участие в акции

1. Загрузка результатов:
   1.1. Перейти в раздел "Результаты"
   1.2. Нажать "Загрузить результат"
   1.3. Заполнить форму:
       - Вес собранной макулатуры
       - Дата сдачи
       - Пункт приема
   1.4. Прикрепить подтверждающие документы
   1.5. Отправить на проверку

2. Работа с картой:
   2.1. Поиск пунктов приема:
       - По адресу
       - По типу пункта
       - По режиму работы
   2.2. Просмотр информации:
       - Адрес
       - Режим работы
       - Контакты
   2.3. Построение маршрута:
       - Выбор пункта назначения
       - Просмотр маршрута
       - Сохранение маршрута

3.5.4 Работа с контентом

1. Новости и анонсы:
   1.1. Просмотр ленты новостей
   1.2. Фильтрация по категориям
   1.3. Поиск по новостям
   1.4. Подписка на обновления

2. Статистика и рейтинги:
   2.1. Просмотр общей статистики
   2.2. Сравнение результатов
   2.3. История достижений
   2.4. Экспорт данных

2. Поддержка:
   2.1. Форма обратной связи
   2.2. Email поддержки
   2.3. Чат с оператором
   2.4. База знаний

3.5.7 Мобильная версия

1. Адаптивный интерфейс:
   1.1. Оптимизация под мобильные устройства
   1.2. Удобная навигация
   1.3. Быстрый доступ к функциям
   1.4. Оптимизированные формы

3.6 Тестирование и отладка веб-приложения

В данном разделе описываются методы и инструменты тестирования веб-приложения, а также процесс отладки и исправления ошибок.

1. Ошибки аутентификации:
   1.1. Проблема: Неправильная валидация email при регистрации
       - Описание: Система принимала некорректные email-адреса
       - Решение: Добавлена строгая валидация через регулярное выражение
       - Код исправления:
         ```php
         // Было
         'email' => 'required|email'

         // Стало
         'email' => [
             'required',
             'email',
             'regex:/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/'
         ]
         ```

   1.2. Проблема: Утечка сессии при параллельных запросах
       - Описание: Сессия сбрасывалась при одновременных запросах
       - Решение: Реализована блокировка сессии через Redis
       - Код исправления:
         ```php
         // Добавлен middleware
         public function handle($request, Closure $next)
         {
             $lock = Redis::lock('session:' . session()->getId(), 10);
             if ($lock->get()) {
                 return $next($request);
             }
             return response()->json(['error' => 'Too many requests'], 429);
         }
         ```

2. Ошибки работы с базой данных:
   2.1. Проблема: N+1 запросы при загрузке команд
       - Описание: Каждый участник команды загружался отдельным запросом
       - Решение: Добавлена жадная загрузка (eager loading)
       - Код исправления:
         ```php
         // Было
         $teams = Team::all();

         // Стало
         $teams = Team::with(['members', 'captain'])->get();
         ```

   2.2. Проблема: Отсутствие индексов в таблице результатов
       - Описание: Медленный поиск по дате и статусу
       - Решение: Добавлены составные индексы
       - Код исправления:
         ```php
         // В миграции
         Schema::table('results', function (Blueprint $table) {
             $table->index(['created_at', 'status']);
             $table->index(['team_id', 'status']);
         });
         ```

3. Ошибки фронтенда:
   3.1. Проблема: Утечка памяти при работе с картой
       - Описание: Маркеры не удалялись при обновлении карты
       - Решение: Добавлена очистка маркеров перед обновлением
       - Код исправления:
         ```javascript
         // Было
         markers.forEach(marker => map.addMarker(marker));

         // Стало
         markers.forEach(marker => {
             if (existingMarkers[marker.id]) {
                 existingMarkers[marker.id].remove();
             }
             existingMarkers[marker.id] = map.addMarker(marker);
         });
         ```

   3.2. Проблема: Некорректная валидация форм на фронтенде
       - Описание: Форма отправлялась с невалидными данными
       - Решение: Добавлена синхронная валидация
       - Код исправления:
         ```javascript
         // Добавлена функция валидации
         function validateForm(formData) {
             const errors = {};
             if (formData.weight <= 0) {
                 errors.weight = 'Вес должен быть больше 0';
             }
             if (!formData.date) {
                 errors.date = 'Укажите дату';
             }
             return errors;
         }
         ```

4. Ошибки безопасности:
   4.1. Проблема: XSS-уязвимость в комментариях
       - Описание: HTML-теги не экранировались при выводе
       - Решение: Добавлена санитизация данных
       - Код исправления:
         ```php
         // Было
         echo $comment->content;

         // Стало
         echo htmlspecialchars($comment->content, ENT_QUOTES, 'UTF-8');
         ```

   4.2. Проблема: CSRF-защита для API
       - Описание: Отсутствовала защита от CSRF-атак
       - Решение: Добавлен middleware VerifyCsrfToken
       - Код исправления:
         ```php
         // В Kernel.php
         protected $middlewareGroups = [
             'api' => [
                 \App\Http\Middleware\VerifyCsrfToken::class,
             ],
         ];
         ```

5. Ошибки производительности:
   5.1. Проблема: Медленная загрузка изображений
       - Описание: Отсутствовала оптимизация изображений
       - Решение: Добавлена обработка через Intervention Image
       - Код исправления:
         ```php
         // Добавлена обработка изображений
         $image = Image::make($request->file('image'))
             ->resize(800, null, function ($constraint) {
                 $constraint->aspectRatio();
                 $constraint->upsize();
             })
             ->save();
         ```

   5.2. Проблема: Отсутствие кэширования API-запросов
       - Описание: Частые запросы к внешнему API
       - Решение: Реализовано кэширование через Redis
       - Код исправления:
         ```php
         // Добавлено кэширование
         $data = Cache::remember('api_data', 3600, function () {
             return Http::get('api.example.com/data')->json();
         });
         ```
